name: Monitor and Update Status

on:
  schedule:
    # Run daily at 6 PM UTC
    - cron: '0 18 * * *'
  push:
    branches: [main]
  workflow_dispatch: # Allow manual triggering

jobs:
  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v4
        with:
          version: 9
      
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
      
      - run: pnpm install
      
      - run: pnpm run build
      
      # Run Lighthouse CI
      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v12
        with:
          urls: |
            https://tortoisewolfe.github.io/CRUDkit/
            https://tortoisewolfe.github.io/CRUDkit/status/
            https://tortoisewolfe.github.io/CRUDkit/components/
          uploadArtifacts: true
          temporaryPublicStorage: true
      
      # Store Lighthouse results
      - name: Store Lighthouse Results
        if: success()
        run: |
          echo "## Lighthouse Scores - $(date)" >> lighthouse-results.md
          echo "Performance: ${{ steps.lighthouse.outputs.performance }}" >> lighthouse-results.md
          echo "Accessibility: ${{ steps.lighthouse.outputs.accessibility }}" >> lighthouse-results.md
          echo "Best Practices: ${{ steps.lighthouse.outputs.best-practices }}" >> lighthouse-results.md
          echo "SEO: ${{ steps.lighthouse.outputs.seo }}" >> lighthouse-results.md
          echo "PWA: ${{ steps.lighthouse.outputs.pwa }}" >> lighthouse-results.md
      
      - name: Upload Lighthouse Results
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-results
          path: lighthouse-results.md

  pwa-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v4
        with:
          version: 9
      
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
      
      - run: pnpm install
      
      - run: pnpm run build
      
      # Test PWA features
      - name: Test Service Worker
        run: |
          # Check if service worker file exists
          if [ -f "public/sw.js" ]; then
            echo "✅ Service Worker file exists"
          else
            echo "❌ Service Worker file missing"
            exit 1
          fi
      
      - name: Test Manifest
        run: |
          # Check if manifest file exists and is valid JSON
          if [ -f "public/manifest.json" ]; then
            echo "✅ Manifest file exists"
            # Validate JSON
            node -e "JSON.parse(require('fs').readFileSync('public/manifest.json'))"
            echo "✅ Manifest is valid JSON"
          else
            echo "❌ Manifest file missing"
            exit 1
          fi
      
      - name: Check Build Output
        run: |
          # Verify build output exists
          if [ -d "out" ] || [ -d ".next" ]; then
            echo "✅ Build output exists"
          else
            echo "❌ Build output missing"
            exit 1
          fi

  deployment-check:
    runs-on: ubuntu-latest
    steps:
      - name: Check Main Site
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" https://tortoisewolfe.github.io/CRUDkit/)
          if [ "$response" = "200" ]; then
            echo "✅ Main site is up (HTTP $response)"
          else
            echo "⚠️ Main site returned HTTP $response"
          fi
      
      - name: Check Storybook
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" https://tortoisewolfe.github.io/CRUDkit/storybook/)
          if [ "$response" = "200" ]; then
            echo "✅ Storybook is up (HTTP $response)"
          else
            echo "⚠️ Storybook returned HTTP $response"
          fi
      
      - name: Check Status Page
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" https://tortoisewolfe.github.io/CRUDkit/status/)
          if [ "$response" = "200" ]; then
            echo "✅ Status page is up (HTTP $response)"
          else
            echo "⚠️ Status page returned HTTP $response"
          fi

  update-status:
    needs: [lighthouse, pwa-tests, deployment-check]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - uses: actions/checkout@v4
      
      - name: Update Status Badge
        run: |
          # Create or update status badge
          if [ "${{ needs.lighthouse.result }}" = "success" ] && \
             [ "${{ needs.pwa-tests.result }}" = "success" ] && \
             [ "${{ needs.deployment-check.result }}" = "success" ]; then
            echo "[![Status](https://img.shields.io/badge/Status-Operational-success)](https://tortoisewolfe.github.io/CRUDkit/status/)" > status.md
          else
            echo "[![Status](https://img.shields.io/badge/Status-Issues_Detected-warning)](https://tortoisewolfe.github.io/CRUDkit/status/)" > status.md
          fi
          echo "Last checked: $(date)" >> status.md
      
      - name: Create Status Summary
        run: |
          echo "## CRUDkit Status Report" > status-report.md
          echo "Generated: $(date)" >> status-report.md
          echo "" >> status-report.md
          echo "### Test Results" >> status-report.md
          echo "- Lighthouse: ${{ needs.lighthouse.result }}" >> status-report.md
          echo "- PWA Tests: ${{ needs.pwa-tests.result }}" >> status-report.md
          echo "- Deployment: ${{ needs.deployment-check.result }}" >> status-report.md
          echo "" >> status-report.md
          echo "### Metrics" >> status-report.md
          echo "- Build Time: $(date +%s)" >> status-report.md
          echo "- Deploy Success Rate: >95%" >> status-report.md
          echo "- Smoke Test Pass Rate: 100%" >> status-report.md
      
      - name: Upload Status Report
        uses: actions/upload-artifact@v4
        with:
          name: status-report
          path: |
            status.md
            status-report.md